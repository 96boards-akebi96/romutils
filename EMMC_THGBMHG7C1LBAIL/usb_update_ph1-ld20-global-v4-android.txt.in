### Firmware base folder on usb storage
fw_folder=/usb

### Temporary buffer address
buf_addr=0x88000000
zip_addr=0x98000000

### default device values
test x$devtype = x && setenv devtype usb
test x$devnum  = x && setenv devnum  0
test x$partnum = x && setenv partnum 1

echo "***************************************"
echo '*** set GPT partition ...           ***'
echo "***************************************"
mmc dev 0 0
gpt write mmc 0 '@uboot_partitions@'

echo "***************************************"
echo '*** Writing to boot partition 0 ... ***'
echo "***************************************"
mmc dev 0 1
fatload ${devtype} ${devnum}:${partnum} $buf_addr $fw_folder/@loaderimage@   && mmc write $buf_addr 0x00000000 0x00000100
fatload ${devtype} ${devnum}:${partnum} $buf_addr $fw_folder/@bootimage@     && mmc write $buf_addr 0x00000100 0x00000B00


echo "***************************************"
echo '*** Writing to normal area ...      ***'
echo "***************************************"
mmc dev 0 0

fatload ${devtype} ${devnum}:${partnum} $buf_addr $fw_folder/akebi96.dtb         && mmc write $buf_addr 0x00006050 0x00000040

fatload ${devtype} ${devnum}:${partnum} $buf_addr $fw_folder/boot.img            && mmc write $buf_addr @boot_start_sect_hex@ @boot_size_sect_hex@
fatload ${devtype} ${devnum}:${partnum} $buf_addr $fw_folder/recovery.img        && mmc write $buf_addr @recovery_start_sect_hex@ @recovery_size_sect_hex@

###
### system pertition information
###
setenv rom_addr @system_start_sect_hex@
setenv rom_size @system_size_sect_hex@
setenv rom_size_src 0x00080000
rom_name=system.img

rom_addr_str=${rom_addr}
# convert string to integer
setexpr rom_size ${rom_size} - 0
setenv count 0
setenv one_count 0
setenv ten_count 0
setenv han_count 0
setenv loop_break 0
while itest $loop_break == 0;
    do if itest ${han_count} != 0; then
        setenv fname $fw_folder/${rom_name}_${han_count}${ten_count}${one_count}.gz ;
    else
        if itest ${ten_count} != 0; then
            setenv fname $fw_folder/${rom_name}_${ten_count}${one_count}.gz;
        else
            setenv fname $fw_folder/${rom_name}_${one_count}.gz;
        fi;
    fi;
    setenv filesize 0
    #setenv stdout nulldev
    if fatsize ${devtype} ${devnum}:${partnum} $fname; then
    else
        setenv loop_break 1
    fi
    #setenv stdout serial
    if itest $loop_break == 0; then
        # Write to eMMC
        if itest ${rom_size} < ${rom_size_src}; then
            setenv rom_size_src "0x${rom_size}";
        fi
        fatload ${devtype} ${devnum}:${partnum} $zip_addr ${fname}    && unzip $zip_addr $buf_addr && mmc write $buf_addr ${rom_addr_str} ${rom_size_src}
        setexpr rom_addr ${rom_addr} + ${rom_size_src}
        rom_addr_str="0x${rom_addr}"
        setexpr rom_size ${rom_size} - ${rom_size_src}

        if itest ${rom_size} -le 0 ; then
            setenv loop_break 1
        fi

        # Count up
        setexpr one_count ${one_count} + 1
        if itest ${one_count} -eq 0xa ; then
            setenv one_count 0;
            setexpr ten_count ${ten_count} + 1;
            if itest ${ten_count} -eq 0xa ; then
                setenv ten_count 0;
                setexpr han_count ${han_count} + 1;
            fi
        fi
        setexpr count ${count} + 1
    fi
done


###
### vendor pertition information
###
setenv rom_addr @vendor_start_sect_hex@
setenv rom_size @vendor_size_sect_hex@
rom_name=vendor.img

fatload ${devtype} ${devnum}:${partnum} $buf_addr ${fw_folder}/${rom_name} && mmc swrite ${buf_addr} ${rom_addr}

###
### userdate pertition information
###
setenv rom_addr @userdata_start_sect_hex@
setenv rom_size @userdata_size_sect_hex@
rom_name=userdata.img

fatload ${devtype} ${devnum}:${partnum} $buf_addr ${fw_folder}/${rom_name} && mmc swrite ${buf_addr} ${rom_addr}

###
### cache pertition information
###
setenv rom_addr @cache_start_sect_hex@
setenv rom_size @cache_size_sect_hex@
rom_name=cache.img

fatload ${devtype} ${devnum}:${partnum} $buf_addr ${fw_folder}/${rom_name} && mmc swrite ${buf_addr} ${rom_addr}

echo "***************************************"
echo "*** USB update is finished.         ***"
echo "***************************************"
